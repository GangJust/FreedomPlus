plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
}

android {
    namespace "io.github.fplus"
    compileSdk 34

    defaultConfig {
        applicationId "io.github.fplus"
        minSdk 24
        targetSdk 34
        versionCode 126
        versionName "1.3.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86_64"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }

        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.4.3"
    }
    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }

    // 更新version的内容
    tasks.register("updateVersionFile") {
        def versionName = android.defaultConfig.versionName
        def versionCode = android.defaultConfig.versionCode
        def versionContent = versionName + "-" + versionCode

        File versionFile = file("src/main/assets/version")
        versionFile.write(versionContent)
    }

    //执行task任务
    applicationVariants.configureEach { variant ->
        variant.assembleProvider.get().dependsOn updateVersionFile

        variant.outputs.configureEach { output ->
            def filename = "freedom+_" + android.defaultConfig.versionName + ".apk"
            output.outputFileName filename
        }
    }
}

dependencies {
    implementation(libs.core.ktx)
    implementation(libs.lifecycle.runtime.ktx)

    //compose
    implementation(libs.activity.compose)
    implementation(platform(libs.compose.bom))
    implementation(libs.ui)
    implementation(libs.ui.graphics)
    implementation(libs.ui.tooling.preview)
    implementation(libs.compose.material)

    // custom
    implementation(libs.accompanist.systemuicontroller)
    implementation(libs.runtime.livedata)
    implementation(libs.mmkv)

    implementation project(":core")
    implementation project(":webdav")
    implementation project(":ktutils")
}